
LED_Pulse_1Hz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000154  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e8  080002f0  000102f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e8  080002e8  000102f0  2**0
                  CONTENTS
  4 .ARM          00000000  080002e8  080002e8  000102f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e8  080002f0  000102f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002e8  080002e8  000102e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002ec  080002ec  000102ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002f0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002f0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000cc  00000000  00000000  00010320  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000075  00000000  00000000  000103ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  000104b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f20  00000000  00000000  000104e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000409  00000000  00000000  00011400  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003bbf  00000000  00000000  00011809  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000153c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00015444  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002d0 	.word	0x080002d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080002d0 	.word	0x080002d0

080001d4 <main>:
#define RCC_AHBENR_ADDR		 *((uint32_t *)0x40021014UL)
#define GPIOA_MODER_ADDR	 *((uint32_t *)0x48000000UL)
#define GPIOA_ODR_ADDR	 	 *((uint32_t *)0x48000014UL)

int main(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]

	//set AHB System Clock Prescaler to 512
	//System clock to CPU is 8MHz/512 = 15625Hz
	RCC_CFGR_ADDR |= (0xF << 4);
 80001de:	4b12      	ldr	r3, [pc, #72]	; (8000228 <main+0x54>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a11      	ldr	r2, [pc, #68]	; (8000228 <main+0x54>)
 80001e4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80001e8:	6013      	str	r3, [r2, #0]

	//enable IO Port A clock
	RCC_AHBENR_ADDR |= (1 << 17);
 80001ea:	4b10      	ldr	r3, [pc, #64]	; (800022c <main+0x58>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a0f      	ldr	r2, [pc, #60]	; (800022c <main+0x58>)
 80001f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f4:	6013      	str	r3, [r2, #0]

	//set Pin 5 of Port A as output
	GPIOA_MODER_ADDR |= (1 << 10);
 80001f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000204:	6013      	str	r3, [r2, #0]

	while(1)
	{
		counter++;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	3301      	adds	r3, #1
 800020a:	607b      	str	r3, [r7, #4]

		//Toggle PA5 every second
		if(counter == 15625){
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f643 5209 	movw	r2, #15625	; 0x3d09
 8000212:	4293      	cmp	r3, r2
 8000214:	d1f7      	bne.n	8000206 <main+0x32>
			counter = 0;
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]
			GPIOA_ODR_ADDR ^= (1 << 5);
 800021a:	4b05      	ldr	r3, [pc, #20]	; (8000230 <main+0x5c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a04      	ldr	r2, [pc, #16]	; (8000230 <main+0x5c>)
 8000220:	f083 0320 	eor.w	r3, r3, #32
 8000224:	6013      	str	r3, [r2, #0]
		counter++;
 8000226:	e7ee      	b.n	8000206 <main+0x32>
 8000228:	40021004 	.word	0x40021004
 800022c:	40021014 	.word	0x40021014
 8000230:	48000014 	.word	0x48000014

08000234 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000234:	480d      	ldr	r0, [pc, #52]	; (800026c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000236:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000238:	480d      	ldr	r0, [pc, #52]	; (8000270 <LoopForever+0x6>)
  ldr r1, =_edata
 800023a:	490e      	ldr	r1, [pc, #56]	; (8000274 <LoopForever+0xa>)
  ldr r2, =_sidata
 800023c:	4a0e      	ldr	r2, [pc, #56]	; (8000278 <LoopForever+0xe>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000240:	e002      	b.n	8000248 <LoopCopyDataInit>

08000242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000246:	3304      	adds	r3, #4

08000248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800024c:	d3f9      	bcc.n	8000242 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024e:	4a0b      	ldr	r2, [pc, #44]	; (800027c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000250:	4c0b      	ldr	r4, [pc, #44]	; (8000280 <LoopForever+0x16>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000254:	e001      	b.n	800025a <LoopFillZerobss>

08000256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000258:	3204      	adds	r2, #4

0800025a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800025c:	d3fb      	bcc.n	8000256 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800025e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000262:	f000 f811 	bl	8000288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000266:	f7ff ffb5 	bl	80001d4 <main>

0800026a <LoopForever>:

LoopForever:
    b LoopForever
 800026a:	e7fe      	b.n	800026a <LoopForever>
  ldr   r0, =_estack
 800026c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000274:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000278:	080002f0 	.word	0x080002f0
  ldr r2, =_sbss
 800027c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000280:	2000001c 	.word	0x2000001c

08000284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000284:	e7fe      	b.n	8000284 <ADC1_2_IRQHandler>
	...

08000288 <__libc_init_array>:
 8000288:	b570      	push	{r4, r5, r6, lr}
 800028a:	4e0d      	ldr	r6, [pc, #52]	; (80002c0 <__libc_init_array+0x38>)
 800028c:	4c0d      	ldr	r4, [pc, #52]	; (80002c4 <__libc_init_array+0x3c>)
 800028e:	1ba4      	subs	r4, r4, r6
 8000290:	10a4      	asrs	r4, r4, #2
 8000292:	2500      	movs	r5, #0
 8000294:	42a5      	cmp	r5, r4
 8000296:	d109      	bne.n	80002ac <__libc_init_array+0x24>
 8000298:	4e0b      	ldr	r6, [pc, #44]	; (80002c8 <__libc_init_array+0x40>)
 800029a:	4c0c      	ldr	r4, [pc, #48]	; (80002cc <__libc_init_array+0x44>)
 800029c:	f000 f818 	bl	80002d0 <_init>
 80002a0:	1ba4      	subs	r4, r4, r6
 80002a2:	10a4      	asrs	r4, r4, #2
 80002a4:	2500      	movs	r5, #0
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d105      	bne.n	80002b6 <__libc_init_array+0x2e>
 80002aa:	bd70      	pop	{r4, r5, r6, pc}
 80002ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002b0:	4798      	blx	r3
 80002b2:	3501      	adds	r5, #1
 80002b4:	e7ee      	b.n	8000294 <__libc_init_array+0xc>
 80002b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002ba:	4798      	blx	r3
 80002bc:	3501      	adds	r5, #1
 80002be:	e7f2      	b.n	80002a6 <__libc_init_array+0x1e>
 80002c0:	080002e8 	.word	0x080002e8
 80002c4:	080002e8 	.word	0x080002e8
 80002c8:	080002e8 	.word	0x080002e8
 80002cc:	080002ec 	.word	0x080002ec

080002d0 <_init>:
 80002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d2:	bf00      	nop
 80002d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d6:	bc08      	pop	{r3}
 80002d8:	469e      	mov	lr, r3
 80002da:	4770      	bx	lr

080002dc <_fini>:
 80002dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002de:	bf00      	nop
 80002e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e2:	bc08      	pop	{r3}
 80002e4:	469e      	mov	lr, r3
 80002e6:	4770      	bx	lr
