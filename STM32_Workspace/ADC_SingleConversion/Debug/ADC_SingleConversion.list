
ADC_SingleConversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001dc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000370  08000378  00010378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000370  08000370  00010378  2**0
                  CONTENTS
  4 .ARM          00000000  08000370  08000370  00010378  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000370  08000378  00010378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000370  08000370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000374  08000374  00010374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000378  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000378  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000180  00000000  00000000  000103a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000a7  00000000  00000000  00010528  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  000105d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010618  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000112b  00000000  00000000  00010648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000043a  00000000  00000000  00011773  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004564  00000000  00000000  00011bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00016111  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0001618c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000358 	.word	0x08000358

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000358 	.word	0x08000358

080001d4 <main>:
#define ADC1_DR_ADDR		*((uint32_t *)0x50000040UL)



int main(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	uint32_t value = 0;
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]

	//Enable ADC12_CLK and set prescaler to 1
	RCC->CFGR2 |= RCC_CFGR2_ADC12PRES_1;
 80001de:	4b31      	ldr	r3, [pc, #196]	; (80002a4 <main+0xd0>)
 80001e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001e2:	4a30      	ldr	r2, [pc, #192]	; (80002a4 <main+0xd0>)
 80001e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001e8:	62d3      	str	r3, [r2, #44]	; 0x2c

	//PLL Enable
	RCC->CR |= RCC_CR_PLL_ON;
 80001ea:	4b2e      	ldr	r3, [pc, #184]	; (80002a4 <main+0xd0>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a2d      	ldr	r2, [pc, #180]	; (80002a4 <main+0xd0>)
 80001f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80001f4:	6013      	str	r3, [r2, #0]

	//Wait PLL clock ready Flag
	while( !(RCC->CR & RCC_CR_PLL_RDY) );
 80001f6:	bf00      	nop
 80001f8:	4b2a      	ldr	r3, [pc, #168]	; (80002a4 <main+0xd0>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000200:	2b00      	cmp	r3, #0
 8000202:	d0f9      	beq.n	80001f8 <main+0x24>

	//Enable ADC1 clock
	RCC->AHBENR	|= (1 << ADC12EN);
 8000204:	4b27      	ldr	r3, [pc, #156]	; (80002a4 <main+0xd0>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a26      	ldr	r2, [pc, #152]	; (80002a4 <main+0xd0>)
 800020a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800020e:	6153      	str	r3, [r2, #20]

	//Enable ADC1 Voltage Regulator
	ADC1_CR_ADDR &= ~(1 << (ADVREGEN+1));
 8000210:	4b25      	ldr	r3, [pc, #148]	; (80002a8 <main+0xd4>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a24      	ldr	r2, [pc, #144]	; (80002a8 <main+0xd4>)
 8000216:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800021a:	6013      	str	r3, [r2, #0]
	ADC1_CR_ADDR |= (1 << ADVREGEN);
 800021c:	4b22      	ldr	r3, [pc, #136]	; (80002a8 <main+0xd4>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a21      	ldr	r2, [pc, #132]	; (80002a8 <main+0xd4>)
 8000222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000226:	6013      	str	r3, [r2, #0]

	ADC1_CR_ADDR |= (1 << ADEN);
 8000228:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <main+0xd4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <main+0xd4>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6013      	str	r3, [r2, #0]

	//CLKMODE = 1 --> Clk input from AHB
	//ADC1_2_CCR_ADDR |= (1 << 16);

	//Enable ADC1
	ADC1_CR_ADDR |= (1 << ADEN);
 8000234:	4b1c      	ldr	r3, [pc, #112]	; (80002a8 <main+0xd4>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a1b      	ldr	r2, [pc, #108]	; (80002a8 <main+0xd4>)
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6013      	str	r3, [r2, #0]

	//Wait until ADC1 is ready for operation
	while( !(ADC1_ISR_ADDR & (1 << ADRDY)) );
 8000240:	bf00      	nop
 8000242:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d0f8      	beq.n	8000242 <main+0x6e>

	//Set Single Conversion Mode
	ADC1_CFGR_ADDR &= ~(1 << CONT);
 8000250:	4b16      	ldr	r3, [pc, #88]	; (80002ac <main+0xd8>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a15      	ldr	r2, [pc, #84]	; (80002ac <main+0xd8>)
 8000256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800025a:	6013      	str	r3, [r2, #0]

	//Set length of group acquisition equal to 1
	ADC1_SQR1_ADDR |= (1 << L3);
 800025c:	4b14      	ldr	r3, [pc, #80]	; (80002b0 <main+0xdc>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <main+0xdc>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6013      	str	r3, [r2, #0]

	//Select Temperature Sensor as input
	ADC1_SQR1_ADDR |= (0xF << SQ1);
 8000268:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <main+0xdc>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <main+0xdc>)
 800026e:	f443 7370 	orr.w	r3, r3, #960	; 0x3c0
 8000272:	6013      	str	r3, [r2, #0]

	//Enable Temperature Sensor
	ADC1_2_CCR_ADDR |= (1 << TSEN);
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <main+0xe0>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <main+0xe0>)
 800027a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800027e:	6013      	str	r3, [r2, #0]

	while(1){
		//Start ADC1
		ADC1_CR_ADDR |= (1 << ADSTART);
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <main+0xd4>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a08      	ldr	r2, [pc, #32]	; (80002a8 <main+0xd4>)
 8000286:	f043 0304 	orr.w	r3, r3, #4
 800028a:	6013      	str	r3, [r2, #0]

		//Wait for End of Conversion Flag
		while( !(ADC1_ISR_ADDR & (1 << EOC)) );
 800028c:	bf00      	nop
 800028e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f003 0304 	and.w	r3, r3, #4
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0f8      	beq.n	800028e <main+0xba>

		//Read Result from Data Register
		value = ADC1_DR_ADDR;
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <main+0xe4>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	607b      	str	r3, [r7, #4]
		ADC1_CR_ADDR |= (1 << ADSTART);
 80002a2:	e7ed      	b.n	8000280 <main+0xac>
 80002a4:	40021000 	.word	0x40021000
 80002a8:	50000008 	.word	0x50000008
 80002ac:	5000000c 	.word	0x5000000c
 80002b0:	50000030 	.word	0x50000030
 80002b4:	50000308 	.word	0x50000308
 80002b8:	50000040 	.word	0x50000040

080002bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480d      	ldr	r0, [pc, #52]	; (80002f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490e      	ldr	r1, [pc, #56]	; (80002fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0b      	ldr	r4, [pc, #44]	; (8000308 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002e6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002ea:	f000 f811 	bl	8000310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ee:	f7ff ff71 	bl	80001d4 <main>

080002f2 <LoopForever>:

LoopForever:
    b LoopForever
 80002f2:	e7fe      	b.n	80002f2 <LoopForever>
  ldr   r0, =_estack
 80002f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000300:	08000378 	.word	0x08000378
  ldr r2, =_sbss
 8000304:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000308:	2000001c 	.word	0x2000001c

0800030c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC1_2_IRQHandler>
	...

08000310 <__libc_init_array>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	4e0d      	ldr	r6, [pc, #52]	; (8000348 <__libc_init_array+0x38>)
 8000314:	4c0d      	ldr	r4, [pc, #52]	; (800034c <__libc_init_array+0x3c>)
 8000316:	1ba4      	subs	r4, r4, r6
 8000318:	10a4      	asrs	r4, r4, #2
 800031a:	2500      	movs	r5, #0
 800031c:	42a5      	cmp	r5, r4
 800031e:	d109      	bne.n	8000334 <__libc_init_array+0x24>
 8000320:	4e0b      	ldr	r6, [pc, #44]	; (8000350 <__libc_init_array+0x40>)
 8000322:	4c0c      	ldr	r4, [pc, #48]	; (8000354 <__libc_init_array+0x44>)
 8000324:	f000 f818 	bl	8000358 <_init>
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	10a4      	asrs	r4, r4, #2
 800032c:	2500      	movs	r5, #0
 800032e:	42a5      	cmp	r5, r4
 8000330:	d105      	bne.n	800033e <__libc_init_array+0x2e>
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000338:	4798      	blx	r3
 800033a:	3501      	adds	r5, #1
 800033c:	e7ee      	b.n	800031c <__libc_init_array+0xc>
 800033e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000342:	4798      	blx	r3
 8000344:	3501      	adds	r5, #1
 8000346:	e7f2      	b.n	800032e <__libc_init_array+0x1e>
 8000348:	08000370 	.word	0x08000370
 800034c:	08000370 	.word	0x08000370
 8000350:	08000370 	.word	0x08000370
 8000354:	08000374 	.word	0x08000374

08000358 <_init>:
 8000358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035a:	bf00      	nop
 800035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035e:	bc08      	pop	{r3}
 8000360:	469e      	mov	lr, r3
 8000362:	4770      	bx	lr

08000364 <_fini>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr
